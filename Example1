{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Linear Regression Example.ipynb","provenance":[],"authorship_tag":"ABX9TyMw5LkG5EKWQyrFTgVsfLC5"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"oABUILxd1Umk","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"e4cb897e-c44d-46ea-d86a-83f26a34ab51","executionInfo":{"status":"ok","timestamp":1586717808905,"user_tz":240,"elapsed":578,"user":{"displayName":"Travis Feldman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiZagykGKVeEn6179A4sbQKxk5Nk0tgOeEgcN8rGzg=s64","userId":"10363633319148492373"}}},"source":["import pandas as pd\n","import numpy as np\n","from matplotlib import pyplot as plt\n","\n","# Generate 'random' data\n","np.random.seed(0)\n","X = 2.5 * np.random.randn(100) + 1.5   # Array of 100 values with mean = 1.5, stddev = 2.5\n","res = 0.5 * np.random.randn(100)       # Generate 100 residual terms\n","y = 2 + 0.3 * X + res                  # Actual values of Y\n","\n","# Create pandas dataframe to store our X and y values\n","df = pd.DataFrame(\n","    {'X': X,\n","     'y': y}\n",")\n","\n","# Show the first five rows of our dataframe\n","df.head()"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>X</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.910131</td>\n","      <td>4.714615</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.500393</td>\n","      <td>2.076238</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.946845</td>\n","      <td>2.548811</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7.102233</td>\n","      <td>4.615368</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6.168895</td>\n","      <td>3.264107</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          X         y\n","0  5.910131  4.714615\n","1  2.500393  2.076238\n","2  3.946845  2.548811\n","3  7.102233  4.615368\n","4  6.168895  3.264107"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"nlm_vWqxwIHK","colab_type":"text"},"source":["Generates 100 rows of data, shows the first five, with two values per row.  \n","Next, let's use ordinary least squares. "]},{"cell_type":"code","metadata":{"id":"L62KIt4WwR3i","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"eb115578-c0af-4d82-eb55-22f31a8cfcae","executionInfo":{"status":"ok","timestamp":1586718480666,"user_tz":240,"elapsed":341,"user":{"displayName":"Travis Feldman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiZagykGKVeEn6179A4sbQKxk5Nk0tgOeEgcN8rGzg=s64","userId":"10363633319148492373"}}},"source":["# Calculate the mean of X and y\n","xmean = np.mean(X)\n","ymean = np.mean(y)\n","\n","# Calculate the terms needed for the numerator and denominator of beta\n","df['xycov'] = (df['X'] - xmean) * (df['y'] - ymean)\n","df['xvar'] = (df['X'] - xmean)**2\n","\n","# Calculate beta and alpha\n","beta = df['xycov'].sum() / df['xvar'].sum()\n","alpha = ymean - (beta * xmean)\n","print(f'alpha = {alpha}')\n","print(f'beta = {beta}')"],"execution_count":9,"outputs":[{"output_type":"stream","text":["alpha = 2.0031670124623426\n","beta = 0.3229396867092763\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jYG9pfCTw5R9","colab_type":"text"},"source":["Good, we have calculated alpha and beta values.  Now we plug those back into our linear equation, and voila, we should get a line of best fit for the 100 data sets we've started with, and then we can input new data (for x, our independent variable) and output new predictions (for y, our dependent variable).  The new equation our program has calculated is Yâ‚‘ = 2.003 + 0.323 X. "]},{"cell_type":"code","metadata":{"id":"NM0bnU7zy_ls","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":306},"outputId":"5da4df1d-444d-45a2-86d0-acbdb433abbd","executionInfo":{"status":"ok","timestamp":1586718777102,"user_tz":240,"elapsed":304,"user":{"displayName":"Travis Feldman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiZagykGKVeEn6179A4sbQKxk5Nk0tgOeEgcN8rGzg=s64","userId":"10363633319148492373"}}},"source":["ypred = alpha + beta * X\n","print(ypred)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["[3.91178282 2.81064315 3.27775989 4.29675991 3.99534802 1.69857201\n"," 3.25462968 2.36537842 2.40424288 2.81907292 2.60387001 3.66168312\n"," 3.10199975 2.58581077 2.84592918 2.75696825 3.69382011 2.32194218\n"," 2.74033151 1.79802302 0.42642221 3.015275   3.18547843 1.88839019\n"," 4.32006116 1.31339555 2.52451965 2.33645381 3.72506464 3.67386219\n"," 2.61267323 2.79288576 1.77082341 0.88838207 2.20668994 2.61380476\n"," 3.48085076 3.45831697 2.17486854 2.24351265 1.64102813 1.34112617\n"," 1.11002064 4.06253353 2.07610925 2.1338976  1.47613319 3.11528277\n"," 1.18459738 2.31582084 1.76462232 2.79994197 2.07517841 1.53439407\n"," 2.46482364 2.83338994 2.54127917 2.73177699 1.9754571  2.19471775\n"," 1.94466613 2.19729158 1.83108353 1.09386364 2.6308214  2.16319902\n"," 1.17143718 2.86120343 1.75506992 2.52951462 3.07620724 2.59171079\n"," 3.40747079 1.49064088 2.81240675 1.93469565 1.78453915 2.02024272\n"," 2.23604485 2.53292159 1.54689373 3.2148581  2.86352875 1.24729141\n"," 3.68911579 4.01822118 3.43926331 2.34231437 1.62310525 3.33888732\n"," 2.16207195 3.47451661 2.65572718 3.2760653  2.77528867 3.05802784\n"," 2.49605373 3.92939769 2.59003892 2.81212234]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0TAGBQuFz0iL","colab_type":"text"},"source":["Next, we plot the ypred against the values we already had from the starting data for y, and then we can visualize the regression model.  "]},{"cell_type":"code","metadata":{"id":"Tr83V5yL0L1M","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":404},"outputId":"cb9fb0dd-358c-44b9-be24-8a5d32bf9513","executionInfo":{"status":"ok","timestamp":1586718972575,"user_tz":240,"elapsed":432,"user":{"displayName":"Travis Feldman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiZagykGKVeEn6179A4sbQKxk5Nk0tgOeEgcN8rGzg=s64","userId":"10363633319148492373"}}},"source":["# Plot regression against actual data\n","plt.figure(figsize=(12, 6))\n","plt.plot(X, ypred)     # regression line\n","plt.plot(X, y, 'ro')   # scatter plot showing actual data\n","plt.title('Actual y (x-axis) vs Predicted ypred (y-axis)')\n","plt.xlabel('X')\n","plt.ylabel('y')\n","\n","plt.show()"],"execution_count":17,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"XrqGpjG40u7d","colab_type":"text"},"source":["The blue line is our line of best fit, Yâ‚‘ = 2.003 + 0.323 X. We can see from this graph that there is a positive linear relationship between X and y. Using our model, we can predict y from any values of X.\n","\n","\n","For example, if we had a value X = 10, we can predict that:\n","\n","Yâ‚‘ = 2.003 + 0.323 (10) = 5.233."]}]}
